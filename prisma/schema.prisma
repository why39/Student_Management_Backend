// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for user roles
enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

// Enum for group member roles
enum GroupMemberRole {
  GROUP_LEADER
  COMMON_MEMBER
}

// User model
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  ownedGroups      Group[]          @relation("GroupOwner")
  groupMemberships GroupMember[]
  notifications    Notification[]
}

// Group model
model Group {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  ownerId  String
  owner    User          @relation("GroupOwner", fields: [ownerId], references: [id])
  members  GroupMember[]
}

// GroupMember model (join table with additional attributes)
model GroupMember {
  id        String         @id @default(uuid())
  role      GroupMemberRole
  joinedAt  DateTime       @default(now())

  // Relationships
  userId    String
  user      User           @relation(fields: [userId], references: [id])
  groupId   String
  group     Group          @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}

// Notification model
model Notification {
  id        String   @id @default(uuid())
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relationships
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

