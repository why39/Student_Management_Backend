# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""The states an activity can be in"""
enum ActivityState {
  """Activity has been canceled"""
  CANCELED

  """Activity has been completed"""
  COMPLETED

  """Activity is currently in progress"""
  IN_PROGRESS

  """Activity has been created but not started"""
  NEW
}

type ActivityType {
  attendees: [UserType!]
  createdAt: DateTime!
  createdBy: UserType!
  createdById: String!
  description: String!
  group: GroupType!
  groupId: String!
  id: ID!
  location: String
  scheduledAt: DateTime!
  state: ActivityState!
  title: String!
}

input AddGroupMemberInput {
  groupId: String!
  role: String!
  userId: String!
}

type AuthResponse {
  accessToken: String!
  user: UserType!
}

input CreateActivityInput {
  description: String!
  groupId: ID!
  location: String
  scheduledAt: DateTime!
  state: ActivityState! = NEW
  title: String!
}

input CreateGroupInput {
  description: String
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GroupMemberType {
  group: GroupType!
  groupId: String!
  id: ID!
  joinedAt: DateTime!
  role: String!
  user: UserType
  userId: String!
}

type GroupType {
  createdAt: DateTime!
  description: String
  id: ID!
  members: [GroupMemberType!]
  name: String!
  owner: UserType!
  ownerId: String!
  updatedAt: DateTime!
}

input JoinActivityInput {
  activityId: ID!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  addGroupMember(addGroupMemberInput: AddGroupMemberInput!): GroupMemberType!
  createActivity(createActivityInput: CreateActivityInput!): ActivityType!
  createGroup(createGroupInput: CreateGroupInput!): GroupType!
  joinActivity(joinActivityInput: JoinActivityInput!): ActivityType!
  login(loginInput: LoginInput!): AuthResponse!
  register(registerInput: RegisterInput!): AuthResponse!
  removeGroup(id: ID!): GroupType!
  removeGroupMember(groupId: ID!, userId: ID!): Boolean!
  updateActivityState(updateActivityStateInput: UpdateActivityStateInput!): ActivityType!
  updateGroup(id: ID!, updateGroupInput: UpdateGroupInput!): GroupType!
}

type Query {
  activitiesByGroup(groupId: ID!): [ActivityType!]!
  activity(id: ID!): ActivityType!
  group(id: ID!): GroupType!
  groups: [GroupType!]!
  me: UserType!
  myActivitiesAsStudent: [ActivityType!]!
  myActivitiesAsTeacher: [ActivityType!]!
  myGroups: [GroupType!]!
  myJoinedActivities: [ActivityType!]!
  myStudentGroups: [GroupType!]!
  studentUsers: [UserType!]!
  teacherUsers: [UserType!]!
  user(id: ID!): UserType!
  users: [UserType!]!
}

input RegisterInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  role: String!
}

input UpdateActivityStateInput {
  activityId: ID!
  state: ActivityState!
}

input UpdateGroupInput {
  description: String
  name: String
}

type UserType {
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  role: String!
  updatedAt: DateTime!
}